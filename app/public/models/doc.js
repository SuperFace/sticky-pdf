// Generated by CoffeeScript 1.6.2
(function() {
  var StickerViewModel, stickerWatcher,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  StickerViewModel = (function() {
    function StickerViewModel(sticker) {
      this.entity_id = ko.observable(sticker.entity_id);
      this.page = ko.observable(sticker.page);
      this.x = ko.observable(sticker.x);
      this.y = ko.observable(sticker.y);
      this.text = ko.observable(sticker.text);
      this.updated = ko.observable(sticker.updated);
      this.deleted = ko.observable(sticker.deleted);
    }

    return StickerViewModel;

  })();

  window.DocViewModel = (function() {
    function DocViewModel(entity_id, stickers) {
      this.stickerStyle = __bind(this.stickerStyle, this);
      this.editable = __bind(this.editable, this);
      this.dragAllowed = __bind(this.dragAllowed, this);
      this.stickerFocus = __bind(this.stickerFocus, this);
      this.newSticker = __bind(this.newSticker, this);
      this.onDrag = __bind(this.onDrag, this);
      this.activate = __bind(this.activate, this);
      var sticker, _i, _len,
        _this = this;

      this.active = ko.observable(1);
      this.liClass = function(page) {
        return ko.computed(function() {
          if (_this.active() === page) {
            return "active";
          }
          return "";
        });
      };
      this.activeSticker = ko.observable(null);
      this.activeStickerElement = null;
      this.document_id = entity_id;
      this.stickers = ko.observableArray([]);
      for (_i = 0, _len = stickers.length; _i < _len; _i++) {
        sticker = stickers[_i];
        this.stickers.push(new StickerViewModel(sticker));
      }
    }

    DocViewModel.prototype.activate = function(page) {
      var _this = this;

      return function() {
        _this.active(page);
        return $(".doc-ctrl").removeClass("drag-blured");
      };
    };

    DocViewModel.prototype.onDrag = function(x, y) {
      if (x < 0 || y < 0) {
        $(".doc-ctrl").addClass("drag-blured");
      } else {
        $(".doc-ctrl").removeClass("drag-blured");
      }
      return this.stickerFocus(this.activeSticker())(false);
    };

    DocViewModel.prototype.newSticker = function(data, event) {
      var $element, clix, cliy, element, offsetX, offsetY, offx, offy, x, y, zoom, _ref, _ref1, _ref2, _ref3,
        _this = this;

      $element = data.target;
      element = $element[0];
      offsetX = parseInt(String(element.style.left).replace(/[^0-9-\.]/g, "")) || 0;
      offsetY = parseInt(String(element.style.top).replace(/[^0-9-\.]/g, "")) || 0;
      zoom = parseFloat($element.css("zoom"));
      _ref = [$element.offset().left * zoom, $element.offset().top * zoom], offx = _ref[0], offy = _ref[1];
      _ref1 = [event.clientX - offx, event.clientY - offy], clix = _ref1[0], cliy = _ref1[1];
      _ref2 = [clix / zoom, cliy / zoom], clix = _ref2[0], cliy = _ref2[1];
      console.log([offx, offy]);
      console.log(offsetX, offsetY);
      console.log(clix, cliy);
      _ref3 = [clix, cliy], x = _ref3[0], y = _ref3[1];
      console.log(zoom);
      return $.ajax({
        url: "/docs/stickers/" + this.document_id,
        type: "post",
        data: {
          json: JSON.stringify({
            text: "",
            x: x,
            y: y,
            page: this.active()
          })
        },
        dataType: "json",
        success: function(sticker) {
          return _this.stickers.push(new StickerViewModel(sticker));
        }
      });
    };

    DocViewModel.prototype.stickerFocus = function(entity_id) {
      var _this = this;

      return function(data, event) {
        var oldActiveSticker, onlyText, text;

        console.log(entity_id);
        oldActiveSticker = _this.activeSticker();
        if (_this.activeSticker() && (oldActiveSticker !== entity_id || !data)) {
          console.log("saving sticker..");
          console.log(_this.activeStickerElement);
          text = $(_this.activeStickerElement).html();
          onlyText = $(_this.activeStickerElement).text();
          if (onlyText !== "") {
            $.ajax({
              url: "/docs/stickers/" + (_this.activeSticker()),
              type: "put",
              data: {
                json: JSON.stringify({
                  text: text
                })
              },
              dataType: "json",
              success: function(data) {
                var sticker, _i, _len, _ref;

                _ref = _this.stickers();
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  sticker = _ref[_i];
                  if (sticker.entity_id() === oldActiveSticker) {
                    sticker.text(data.text);
                  }
                }
                return console.log(_this.stickers());
              }
            });
          } else {
            $.ajax({
              url: "/docs/stickers/" + (_this.activeSticker()),
              type: "delete",
              success: function() {
                return _this.stickers.remove(function(item) {
                  return item.entity_id() === oldActiveSticker;
                });
              }
            });
          }
          _this.activeSticker(null);
          return;
        }
        console.log(oldActiveSticker);
        if (oldActiveSticker !== entity_id && event) {
          _this.activeSticker(entity_id);
          return _this.activeStickerElement = event.target;
        }
      };
    };

    DocViewModel.prototype.dragAllowed = function() {
      return $(".sticker:hover").length === 0;
    };

    DocViewModel.prototype.editable = function(entity_id) {
      var _this = this;

      return ko.computed(function() {
        return _this.activeSticker() === entity_id;
      });
    };

    DocViewModel.prototype.stickerStyle = function(sticker) {
      var _this = this;

      return ko.computed(function() {
        return "left: " + (sticker.x()) + "px; top: " + (sticker.y()) + "px;";
      });
    };

    return DocViewModel;

  })();

  stickerWatcher = function() {
    var data,
      _this = this;

    data = {};
    if (stickerWatcher.nonce) {
      data.nonce = stickerWatcher.nonce;
    }
    return $.ajax({
      type: "get",
      url: "/docs/stickers/" + stickerWatcher.entity_id,
      data: data,
      dataType: "json",
      success: function(res) {
        var mapped, ok, sticker, update, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _results;

        console.log(res);
        mapped = {};
        ok = {};
        stickerWatcher.nonce = res.nonce;
        _ref = res.stickers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sticker = _ref[_i];
          mapped[sticker.entity_id] = sticker;
        }
        _ref1 = docView.stickers();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          sticker = _ref1[_j];
          update = mapped[sticker.entity_id()];
          if (update && sticker.entity_id() !== docView.activeSticker()) {
            ok[sticker.entity_id()] = true;
            docView.stickers.remove(sticker);
            docView.stickers.push(new StickerViewModel(update));
          }
        }
        _ref2 = res.stickers;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          sticker = _ref2[_k];
          if (!ok[sticker.entity_id]) {
            _results.push(docView.stickers.push(new StickerViewModel(sticker)));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    });
  };

  stickerWatcher.entity_id = $("#document_id").text();

  setInterval(stickerWatcher, 10000);

}).call(this);
