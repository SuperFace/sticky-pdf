// Generated by CoffeeScript 1.6.2
(function() {
  var Rest,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Rest = (function() {
    function Rest(app, prefix) {
      var _this = this;

      this.app = app;
      this.prefix = prefix != null ? prefix : "/" + this.constructor.name;
      this.condition = __bind(this.condition, this);
      this.fail = __bind(this.fail, this);
      console.log("creating Rest > " + this.constructor.name);
      this.entity = this.constructor.name.toLowerCase();
      app.param("" + this.entity + "_id", function(req, res, next, id) {
        if (!req.params) {
          req.params = {};
        }
        req.params.id = id;
        return next();
      });
      if (this.read) {
        this.reg("get", "read");
      }
      if (this.create) {
        this.reg("post", "create");
      }
      if (this.update) {
        this.reg("put", "update");
      }
      if (this["delete"]) {
        this.reg("delete", "delete");
      }
      if (this.readid) {
        this.regid("get", "readid");
      }
      if (this.createid) {
        this.regid("post", "createid");
      }
      if (this.updateid) {
        this.regid("put", "updateid");
      }
      if (this.deleteid) {
        this.regid("delete", "deleteid");
      }
    }

    Rest.prototype.reg = function(method, cb) {
      var _this = this;

      return this.app[method](this.prefix, function(req, res) {
        return _this[cb](req, res);
      });
    };

    Rest.prototype.regid = function(method, cb) {
      var _this = this;

      return this.app[method]("" + this.prefix + "/:" + this.entity + "_id", function(req, res) {
        return _this[cb](req, res);
      });
    };

    Rest.prototype.fail = function(res, err, msg) {
      console.log(err);
      return res.send(msg);
    };

    Rest.prototype.condition = function(variable, cb) {
      var _this = this;

      return function(val) {
        if (val === void 0) {
          return variable;
        } else {
          variable = val;
          return cb();
        }
      };
    };

    return Rest;

  })();

  module.exports = Rest;

}).call(this);
