// Generated by CoffeeScript 1.6.2
(function() {
  var Docs, MongoClient, ObjectID, Rest, exec, fs, gm, path,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Rest = require("./rest");

  fs = require("fs");

  exec = require("child_process").exec;

  gm = require("gm");

  path = require("path");

  MongoClient = require("mongodb").MongoClient;

  ObjectID = require("mongodb").ObjectID;

  Docs = (function(_super) {
    var Stickers, _ref;

    __extends(Docs, _super);

    Stickers = (function(_super1) {
      __extends(Stickers, _super1);

      function Stickers() {
        _ref = Stickers.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Stickers.prototype.read = function(read, res) {
        return res.send("sticker is here!");
      };

      Stickers.prototype.create = function(read, res) {
        return res.send("sticker is here!");
      };

      return Stickers;

    })(Rest);

    function Docs(app, prefix) {
      this.app = app;
      this.prefix = prefix;
      this.condition = __bind(this.condition, this);
      this.fail = __bind(this.fail, this);
      this.stickers = new Stickers(this.app, "" + this.prefix + "/stickers");
      Docs.__super__.constructor.call(this, this.app, this.prefix);
    }

    Docs.prototype.fail = function(res, err, msg) {
      console.log(err);
      return res.send(msg);
    };

    Docs.prototype.condition = function(variable, cb) {
      var _this = this;

      return function(val) {
        if (val === void 0) {
          return variable;
        } else {
          variable = val;
          return cb();
        }
      };
    };

    Docs.prototype.read = function(req, res) {
      var _this = this;

      console.log("get list of documents");
      return MongoClient.connect("mongodb://localhost:27017/stickypdf", function(err, db) {
        if (err) {
          return _this.fail(res, err, "sorry, error occurred while db connecting");
        }
        return db.collection("docs", function(err, docs) {
          if (err) {
            return _this.fail(res, err, "sorry, error occurred while collection creating");
          }
          return docs.find().toArray(function(err, items) {
            var docslist;

            if (err) {
              _this.fail(res, err, "sorry, unable to load documents");
            }
            docslist = items;
            return res.render("docs", {
              docs: docslist
            });
          });
        });
      });
    };

    Docs.prototype.create = function(req, res) {
      var cb, conditions, entityId, fileId, jpgPath, jpgPathFirst, newPath, thumbPath, title,
        _this = this;

      entityId = ObjectID();
      conditions = {};
      cb = function() {
        var key, value;

        console.log("cb is here");
        console.log(conditions);
        for (key in conditions) {
          value = conditions[key];
          if (value() === false) {
            return;
          }
        }
        return res.redirect("/docs/" + entityId);
      };
      conditions.rename = this.condition(false, cb);
      conditions.render = this.condition(false, cb);
      conditions.thumb = this.condition(false, cb);
      conditions.save = this.condition(false, cb);
      console.log("move file to our directory");
      fileId = ObjectID();
      newPath = "" + process.env.PWD + "/files/" + fileId + ".pdf";
      jpgPath = "" + process.env.PWD + "/files/" + fileId + "-%d.jpg";
      jpgPathFirst = "" + process.env.PWD + "/files/" + fileId + "-1.jpg";
      thumbPath = "" + process.env.PWD + "/files/" + fileId + ".thumb.jpg";
      title = req.files.document.name.replace(/\.pdf$/, "");
      return fs.readFile(req.files.document.path, function(err, data) {
        if (err) {
          return _this.fail(res, err, "sorry, error occurred while uploading your pdf");
        }
        return fs.writeFile(newPath, data, function(err) {
          if (err) {
            return _this.fail(res, err, "sorry, error occurred while uploading your pdf");
          }
          conditions.rename(true);
          console.log("render file to jpg");
          return exec("gs -dNOPAUSE -dBATCH -sDEVICE=jpeg -r144 -sOutputFile=" + jpgPath + " " + newPath, function(err, stdout) {
            var pageCount;

            if (err) {
              return _this.fail(res, err, "sorry, error occurred while rendering your pdf");
            }
            stdout = stdout.split("\n");
            stdout = stdout.filter(function(x) {
              return x.match("Page");
            });
            pageCount = parseInt(stdout[stdout.length - 1].replace("Page ", ""));
            console.log(pageCount);
            conditions.render(true);
            console.log("create thumbnail");
            return gm("" + jpgPathFirst).thumb(100, 100, "" + thumbPath, 90, function(err) {
              var doc;

              if (err) {
                return _this.fail(res, err, "sorry, error occurred while rendering thumbnail of your pdf");
              }
              conditions.thumb(true);
              console.log("create doc object");
              doc = {
                entity_id: entityId,
                file_id: fileId,
                stickers: [],
                page_cnt: pageCount,
                title: title
              };
              console.log("save it to mongo");
              return MongoClient.connect("mongodb://localhost:27017/stickypdf", function(err, db) {
                if (err) {
                  return _this.fail(res, err, "sorry, error occurred while db connecting");
                }
                return db.collection("docs", function(err, docs) {
                  if (err) {
                    return _this.fail(res, err, "sorry, error occurred while collection creating");
                  }
                  return docs.insert(doc, {
                    w: 1,
                    j: 1
                  }, function(err, result) {
                    if (err) {
                      return _this.fail(res, err, "sorry, error occurred while saving document");
                    }
                    console.log(result);
                    return conditions.save(true);
                  });
                });
              });
            });
          });
        });
      });
    };

    Docs.prototype.update = function(req, res) {
      return res.send("docs::update");
    };

    Docs.prototype["delete"] = function(req, res) {
      return res.send("docs::delete");
    };

    Docs.prototype.readid = function(req, res) {
      console.log("i am here :)");
      return res.send("docs::readid" + req.params.id);
    };

    Docs.prototype.createid = function(req, res) {
      console.log("i am here :)");
      return res.send("docs::createid" + req.params.id + "\n");
    };

    return Docs;

  })(Rest);

  exports.Docs = Docs;

}).call(this);
